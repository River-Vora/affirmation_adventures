buildscript {
  repositories {
    gradlePluginPortal()
  }
  dependencies {
    classpath "io.github.fourlastor:construo:1.7.1"
    if (enableGraalNative == 'true') {
      classpath "org.graalvm.buildtools.native:org.graalvm.buildtools.native.gradle.plugin:0.9.28"
    }
  }
}

plugins {
  id 'application'
}
plugins {
  id "io.github.fourlastor.construo" version "1.7.1"
}


import io.github.fourlastor.construo.Target

sourceSets.main.resources.srcDirs += [rootProject.file('assets').path]

// Set the main class for the application plugin
application {
  mainClass.set('com.badlogic.affirmation_adventures.lwjgl3.Lwjgl3Launcher')
}

eclipse.project.name = appName + '-lwjgl3'

// Set Java compatibility
java {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8
  if (JavaVersion.current().isJava9Compatible()) {
    withJavadocJar()
    withSourcesJar()
  }
}

// Suppress warnings about obsolete options
tasks.named('compileJava') {
  options.compilerArgs << '-Xlint:-options'
}

// Define project dependencies
dependencies {
  implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
  implementation "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
  implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
  implementation project(':core')

  if (enableGraalNative == 'true') {
    implementation "io.github.berstanio:gdx-svmhelper-backend-lwjgl3:$graalHelperVersion"
    implementation "io.github.berstanio:gdx-svmhelper-extension-box2d:$graalHelperVersion"
  }
}

def os = System.properties['os.name'].toLowerCase()

tasks.named('run') {
  workingDir = rootProject.file('assets').path
  ignoreExitValue = true

  if (os.contains('mac')) {
    jvmArgs += "-XstartOnFirstThread"
  }
}

tasks.named('jar') {
  archiveFileName.set("${appName}-${projectVersion}.jar")
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  dependsOn configurations.runtimeClasspath
  from {
    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
  }
  exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')

  manifest {
    attributes(
      'Main-Class': 'com.badlogic.affirmation_adventures.lwjgl3.Lwjgl3Launcher'
    )
  }

  doLast {
    file(archiveFile.get().asFile).setExecutable(true, false)
  }
}

construo {
  name.set(appName)
  humanName.set(appName)
  version.set("$projectVersion")

  targets {
    create("linuxX64", Target.Linux) {
      architecture.set(Target.Architecture.X86_64)
      jdkUrl.set("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.12%2B7/OpenJDK17U-jdk_x64_linux_hotspot_17.0.12_7.tar.gz")
    }
    create("macM1", Target.MacOs) {
      architecture.set(Target.Architecture.AARCH64)
      jdkUrl.set("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.12%2B7/OpenJDK17U-jdk_aarch64_mac_hotspot_17.0.12_7.tar.gz")
      identifier.set("com.badlogic.affirmation_adventures." + appName)
      macIcon.set(project.file("icons/logo.icns"))
    }
    create("macX64", Target.MacOs) {
      architecture.set(Target.Architecture.X86_64)
      jdkUrl.set("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.12%2B7/OpenJDK17U-jdk_x64_mac_hotspot_17.0.12_7.tar.gz")
      identifier.set("com.badlogic.affirmation_adventures." + appName)
      macIcon.set(project.file("icons/logo.icns"))
    }
    create("winX64", Target.Windows) {
      architecture.set(Target.Architecture.X86_64)
      jdkUrl.set("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.12%2B7/OpenJDK17U-jdk_x64_windows_hotspot_17.0.12_7.zip")
      // Uncomment the next line to show a console when the game runs, to print messages.
      // useConsole.set(true)
    }
  }
}

// Equivalent to the jar task; here for compatibility with gdx-setup.
tasks.register('dist') {
  dependsOn 'jar'
}

distributions {
  main {
    contents {
      into('libs') {
        project.configurations.runtimeClasspath.files.findAll { file ->
          file.getName() != project.tasks.jar.outputs.files.singleFile.name
        }.each { file ->
          exclude file.name
        }
      }
    }
  }
}

tasks.named('startScripts') {
  dependsOn(':lwjgl3:jar')
  classpath = project.tasks.jar.outputs.files
}

if (enableGraalNative == 'true') {
  apply from: file("nativeimage.gradle")
}
